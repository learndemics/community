{"componentChunkName":"component---src-pages-components-feedback-dialog-mdx","path":"/components/FeedbackDialog/","result":{"pageContext":{"frontmatter":{"title":"FeedbackDialog","description":"Allow visitors to your website to provide feedback through a dialog"},"relativePagePath":"/components/FeedbackDialog.mdx","titleType":"page","MdxNode":{"id":"c35556da-a0c4-528a-90ed-1a4b9417b436","children":[],"parent":"aeb1206c-c6ea-5596-a2c2-c2a23158c250","internal":{"content":"---\ntitle: FeedbackDialog\ndescription: Allow visitors to your website to provide feedback through a dialog\n---\n\n<PageDescription>\n\nThe `<FeedbackDialog>` component is a non-modal dialog that allows your users to\nprovide low-friction, anonymous feedback for a specific page.\n\n</PageDescription>\n\n## Activating the dialog\n\nThe Feedback button only becomes visible once you've supplied an `onSubmit`\nhandler. To do that, we'll need to shadow the `FeedbackDialog` component.\n\n1. Create a new javascript file under\n   `src/gatsby-theme-carbon/components/FeedbackDialog/FeedbackDialog.js`.\n   Matching the filepath exactly is important here.\n\n2. Copy the following snippet into your new file\n\n```jsx\nimport React from 'react';\nimport ThemeFeedbackDialog from 'gatsby-theme-carbon/src/components/FeedbackDialog/FeedbackDialog';\n\nconst FeedbackDialog = ({ props }) => {\n  const onSubmit = (data) => {\n    console.log({ ...data });\n  };\n\n  return <ThemeFeedbackDialog {...props} onSubmit={onSubmit} />;\n};\n\nexport default FeedbackDialog;\n```\n\n## Creating a handler\n\nNext, you'll need a place to send the data. For the Carbon website, we use a\nserverless function that forwards the data to a\n[SurveyGizmo](https://www.surveygizmo.com/) quiz. You can see that function\n[here](https://github.com/carbon-design-system/carbon-website/blob/master/api/survey.ts).\n\nThe handler can send a fetch request off to the endpoint you create. Update the\n`onSubmit` handler to send the data wherever you want. This function receives\nthe following arguments:\n\n- `experience`: \"Negative\", \"Positive\" or \"Neutral\"\n- `comment`: An optional comment\n- `path`: the window location when the survey was submitted\n\n```jsx\nconst FeedbackDialog = ({ props }) => {\n  const onSubmit = data => {\n    fetch(process.env.API_ENDPOINT, {\n      method: 'POST',\n      body: JSON.stringify(data),\n  });\n\n  return <ThemeFeedbackDialog {...props} onSubmit={onSubmit} />;\n};\n```\n","type":"Mdx","contentDigest":"8621180bdcb6c32c448025f4ba8b895c","counter":165,"owner":"gatsby-plugin-mdx"},"exports":[],"rawBody":"---\ntitle: FeedbackDialog\ndescription: Allow visitors to your website to provide feedback through a dialog\n---\n\n<PageDescription>\n\nThe `<FeedbackDialog>` component is a non-modal dialog that allows your users to\nprovide low-friction, anonymous feedback for a specific page.\n\n</PageDescription>\n\n## Activating the dialog\n\nThe Feedback button only becomes visible once you've supplied an `onSubmit`\nhandler. To do that, we'll need to shadow the `FeedbackDialog` component.\n\n1. Create a new javascript file under\n   `src/gatsby-theme-carbon/components/FeedbackDialog/FeedbackDialog.js`.\n   Matching the filepath exactly is important here.\n\n2. Copy the following snippet into your new file\n\n```jsx\nimport React from 'react';\nimport ThemeFeedbackDialog from 'gatsby-theme-carbon/src/components/FeedbackDialog/FeedbackDialog';\n\nconst FeedbackDialog = ({ props }) => {\n  const onSubmit = (data) => {\n    console.log({ ...data });\n  };\n\n  return <ThemeFeedbackDialog {...props} onSubmit={onSubmit} />;\n};\n\nexport default FeedbackDialog;\n```\n\n## Creating a handler\n\nNext, you'll need a place to send the data. For the Carbon website, we use a\nserverless function that forwards the data to a\n[SurveyGizmo](https://www.surveygizmo.com/) quiz. You can see that function\n[here](https://github.com/carbon-design-system/carbon-website/blob/master/api/survey.ts).\n\nThe handler can send a fetch request off to the endpoint you create. Update the\n`onSubmit` handler to send the data wherever you want. This function receives\nthe following arguments:\n\n- `experience`: \"Negative\", \"Positive\" or \"Neutral\"\n- `comment`: An optional comment\n- `path`: the window location when the survey was submitted\n\n```jsx\nconst FeedbackDialog = ({ props }) => {\n  const onSubmit = data => {\n    fetch(process.env.API_ENDPOINT, {\n      method: 'POST',\n      body: JSON.stringify(data),\n  });\n\n  return <ThemeFeedbackDialog {...props} onSubmit={onSubmit} />;\n};\n```\n","frontmatter":{"title":"FeedbackDialog","description":"Allow visitors to your website to provide feedback through a dialog"},"fileAbsolutePath":"C:/Users/MOHAMMEDABDULQADEERM/Desktop/shifting-gears/packages/example/src/pages/components/FeedbackDialog.mdx"}}},"staticQueryHashes":["1364590287","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","63531786","63531786","768070550","768070550"]}